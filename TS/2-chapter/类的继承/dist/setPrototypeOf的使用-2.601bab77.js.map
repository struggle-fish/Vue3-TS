{"version":3,"sources":["src/setPrototypeOf的使用-2.js"],"names":["People","name","sex","phone","prototype","doEat","console","log","ChinesePeople","national","call","getHukou","_extends","son","parent","Object","setPrototypeOf","__proto__","chinesePeopleTwo","chinesePeopleOne"],"mappings":"AAAA,SAASA,MAAM,CAAEC,IAAI,EAAEC,GAAG,EAAEC,KAAK,EAAE;EAAC;EAClC,IAAI,CAACF,IAAI,GAAGA,IAAI;EAChB,IAAI,CAACC,GAAG,GAAGA,GAAG;EACd,IAAI,CAACC,KAAK,GAAGA,KAAK;AACpB;AAEAH,MAAM,CAACI,SAAS,CAACC,KAAK,GAAG,YAAY;EACnCC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACN,IAAI,GAAG,OAAO,CAAC;AAClC,CAAC;AAED,SAASO,aAAa,CAAEP,IAAI,EAAEC,GAAG,EAAEC,KAAK,EAAEM,QAAQ,EAAE;EAAC;;EAEnDT,MAAM,CAACU,IAAI,CAAC,IAAI,EAAET,IAAI,EAAEC,GAAG,EAAEC,KAAK,CAAC;EACnC,IAAI,CAACM,QAAQ,GAAGA,QAAQ,CAAC;AAC3B;;AAEAD,aAAa,CAACJ,SAAS,CAACO,QAAQ,GAAG,YAAY;EAC7CL,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;AACtB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASK,QAAQ,CAAEC,GAAG,EAAEC,MAAM,EAAE;EAAC;;EAE/B;EACA,OAAOC,MAAM,CAACC,cAAc,CAACH,GAAG,CAACT,SAAS,EAAEU,MAAM,CAACV,SAAS,CAAC;EAC7D;EACAI,aAAa,CAACJ,SAAS,CAACa,SAAS,GAAGjB,MAAM,CAACI,SAAS;AACtD;AAEAQ,QAAQ,CAACJ,aAAa,EAAER,MAAM,CAAC;AAC/B;AACA;AACA;;AAEA;AACA;AACA,IAAIkB,gBAAgB,GAAG,IAAIV,aAAa,CAAC,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC;AACjE,IAAIW,gBAAgB,GAAG,IAAIX,aAAa,CAAC,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC;AAClEU,gBAAgB,CAACP,QAAQ,EAAE;AAC3BL,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEY,gBAAgB,CAAC;AAClDb,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEW,gBAAgB,CAAC","file":"setPrototypeOf的使用-2.601bab77.js","sourceRoot":"..","sourcesContent":["function People (name, sex, phone) {//父类 【父构造函数】\n  this.name = name;\n  this.sex = sex;\n  this.phone = phone;\n}\n\nPeople.prototype.doEat = function () {\n  console.log(this.name + \"吃饭...\")\n}\n\nfunction ChinesePeople (name, sex, phone, national) {//ChinesePeople子类【子构造函数】\n\n  People.call(this, name, sex, phone)\n  this.national = national;//民族\n}\n\nChinesePeople.prototype.getHukou = function () {\n  console.log(\"Hukou\");\n}\n// ES6( Object.setPrototypeOf方法)\n// Object.setPrototypeOf() 为现有对象设置原型，返回一个新对象\n// 接收两个参数：第一个是现有对象，第二是原型对象。\n// 返回的新对象newmiddle和第二个原型对象关系为\n// newmiddle.__proto__=parent.prototype\n// 由于setPrototypeOf的作用\n//  middle.__proto__= parent.prototype\n//  newmiddle最终的结果就是middle\nfunction _extends (son, parent) {//继承\n\n  // TODO 只关联原型即可\n  return Object.setPrototypeOf(son.prototype, parent.prototype)\n  //son.prototype.__proto__ = parent.prototype\n  ChinesePeople.prototype.__proto__ = People.prototype\n}\n\n_extends(ChinesePeople, People);\n//let middle = _extends(People);\n//ChinesePeople.prototype = middle\n//ChinesePeople.prototype.constructor = ChinesePeople//需要额外增加子构造函数指向的原型对象空间中的constructor属性\n\n// chinesePeopleTwo.__proto__ = ChinesePeople.prototype\n// chinesePeopleTwo.__proto_.__proto__ = ChinesePeople.prototype.__proto__\nlet chinesePeopleTwo = new ChinesePeople(\"王海\", \"男\", \"1111\", \"汉族\");\nlet chinesePeopleOne = new ChinesePeople(\"约克夏\", \"女\", \"1111\", \"傣族\");\nchinesePeopleTwo.getHukou();\nconsole.log(\"chinesePeopleOne:\", chinesePeopleOne);\nconsole.log(\"chinesePeopleTwo:\", chinesePeopleTwo);\n\n\n"]}