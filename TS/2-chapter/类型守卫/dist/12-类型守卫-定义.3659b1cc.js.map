{"version":3,"sources":["src/12-类型守卫-定义.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAoCA,IAAA,UAAA,GAAA,aAAA,YAAA;EAAA,SAAA,UAAA,GAAA,CAMA;EAJgB,UAAA,CAAA,SAAS,GAAvB,UAAwB,GAAW,EAAA;IACjC,OAAO,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;EAChC,CAAC;EAEH,OAAA,UAAC;AAAD,CANA,EAAA;AAUA,IAAI,OAAO,GAAc;EACvB,QAAQ,EAAE,YAAY;EACtB,GAAG,EAAE,EAAE;EACP,GAAG,EAAA,eAAA;IACD,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;EAC1D,CAAC;EACD,UAAU,EAAE;CACb;AAGD,SAAS,gBAAgB,CAAC,GAAQ,EAAA;EAEhC,IAAI,GAAG,IAAI,YAAY,IAAI,GAAG,EAAE;IAAE;IAChC,IAAI,OAAK;IACT,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,UAAC,GAAG,EAAA;MAC3B,OAAK,GAAG,GAAG,CAAC,GAAG,CAAC;MAChB,IAAI,OAAO,OAAK,KAAK,QAAQ,EAAE;QAC7B;QACA,OAAO,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,UAAU,CAAC,SAAS,CAAC,OAAK,CAAC,CAAC;OACpD,MAAM,IAAI,OAAO,OAAK,KAAK,UAAU,EAAE;QACtC,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,OAAK,CAAC;QAC5B,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;OACb,MAAM;QACL,OAAO,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC,OAAK,CAAC;;IAElC,CAAC,CAAC;GACH,MAAM;IACL,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC;;AAE7B;AAEA,gBAAgB,CAAC,OAAO,CAAC","file":"12-类型守卫-定义.3659b1cc.js","sourceRoot":"..","sourcesContent":["/*\n**类型守卫定义：** 在 \n语句的块级作用域【if语句内或条目运算符表达式内】缩小变量的一种类型推断的行为。\n\n**类型守卫产生时机**：TS  条件语句中遇到下列条件关键字时，会在语句的块级作用域内缩小变量的类型，这种类型推断的行为称作类型守卫 ( Type Guard )。类型守卫可以帮助我们在块级作用域中获得更为需要的精确变量类型，从而减少不必要的类型断言。\n\n- 类型判断：`typeof`\n- 属性或者方法判断：`in`\n- 实例判断：`instanceof`\n- 字面量相等判断：`==`, `===`, `!=`, `!==`\n\n*/\n\n\n\n\n\n\n//  大厂TS类型守卫晋级考核题【综合题】:\n//  请编写一个操作对象方法和属性的函数实现以下功能\n//   1. 当对象字符串属性有空格时就去掉空格后输出.\n//   2. 当遇到对象方法时就执行,其他数据类型的属性一律直接输出\n//   3. 只有对象中包含allowoutput属性时,才允许输出。\n//   4. 函数接收到外部传入的null,undefined,{}时，直接输出不是一个合法的对象。\n//  考核点：1. 考核对类型守卫的熟练运用程度 2.静态方法  \n\n\n\n\ninterface TestInter {\n  username: string,\n  age: number,\n  eat(): void,\n  allowinput?: 1\n}\n\nclass StringUtil {//工具类\n\n  public static trimSpace(str: string): string {\n    return str.replace(/\\s+/g, \"\")\n  }\n\n}\n\n\n\nlet testobj: TestInter = {\n  username: \" wan  g wu\",\n  age: 23,\n  eat() {\n    console.log(StringUtil.trimSpace(this.username) + \" 吃饭\")\n  },\n  allowinput: 1\n}\n\n\nfunction processObjOutput(obj: any) {\n\n  if (obj && 'allowinput' in obj) { // 判断allowinput属性或者方法在ojb对象中是否存在\n    let value\n    Object.keys(obj).forEach((key) => {\n      value = obj[key]\n      if (typeof value === 'string') {\n        // 把变量的范围缩小为string类型在语句块内使用该数据类型\n        console.log(key + \":\", StringUtil.trimSpace(value));\n      } else if (typeof value === 'function') {\n        console.log(\"value:\", value)\n        obj[key](); // TODO 这里不能直接用value(), 把一个对象的函数赋值给外部变量去执行的话，this会变成window\n      } else {\n        console.log(key + \":\", +value)\n      }\n    })\n  } else {\n    console.log(\"不是一个合法的对象。\")\n  }\n}\n\nprocessObjOutput(testobj)\n\n// processObjOutput(undefined)\n\nexport { }\n\n\n\n\n\n\n"]}